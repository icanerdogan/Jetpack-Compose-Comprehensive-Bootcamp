plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.jetbrains.kotlin.android)
    id 'androidx.room'
    id 'kotlin-kapt'
    id 'com.google.dagger.hilt.android'
    id 'dagger.hilt.android.plugin'
}

def localPropertiesFile = rootProject.file("local.properties")
def localProperties = new Properties()
localProperties.load(new FileInputStream(localPropertiesFile))

android {
    namespace 'com.ibrahimcanerdogan.jetpackcomposecomprehensivebootcamp'
    compileSdk 34

    defaultConfig {
        applicationId "com.ibrahimcanerdogan.jetpackcomposecomprehensivebootcamp"
        minSdk 24
        targetSdk 34
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }

        buildConfigField "String", "WEATHER_API_KEY", localProperties['WEATHER_API_KEY']
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    room {
        schemaDirectory "$projectDir/schemas"
    }
    buildFeatures {
        compose true
        buildConfig true // FOR SECRET API BuildConfig
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.5.1'
    }
    packaging {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

dependencies {

    implementation libs.androidx.core.ktx
    implementation libs.androidx.lifecycle.runtime.ktx
    implementation libs.androidx.activity.compose
    implementation platform(libs.androidx.compose.bom)
    implementation libs.androidx.ui
    implementation libs.androidx.ui.graphics
    implementation libs.androidx.ui.tooling.preview
    implementation libs.androidx.material3
    testImplementation libs.junit
    androidTestImplementation libs.androidx.junit
    androidTestImplementation libs.androidx.espresso.core
    androidTestImplementation platform(libs.androidx.compose.bom)
    androidTestImplementation libs.androidx.ui.test.junit4
    debugImplementation libs.androidx.ui.tooling
    debugImplementation libs.androidx.ui.test.manifest

    // For All Icon Access
    // https://stackoverflow.com/questions/65665563/android-jetpack-compose-icons-doesnt-contain-some-of-the-material-icons
    implementation libs.androidx.material.icons.extended

    // Navigation
    implementation libs.androidx.navigation.compose

    //Coil
    implementation libs.coil.compose

    // Retrofit
    implementation libs.retrofit
    implementation libs.converter.gson
    implementation libs.okhttp
    implementation libs.okhttp3.okhttp

    // Gson
    implementation libs.gson

    // Room
    implementation libs.androidx.room.runtime
    annotationProcessor libs.androidx.room.room.compiler
    // To use Kotlin annotation processing tool (kapt) MUST HAVE!
    kapt(libs.androidx.room.room.compiler)
    implementation libs.androidx.room.ktx

    // Lifecycle
    implementation libs.androidx.lifecycle.viewmodel.compose
    implementation libs.androidx.lifecycle.runtime.compose
    implementation libs.androidx.lifecycle.service

    // Coroutines
    implementation libs.kotlinx.coroutines.core
    implementation libs.kotlinx.coroutines.android
    implementation libs.kotlinx.coroutines.play.services

    // Dependency Injection
    implementation libs.hilt.android
    implementation libs.androidx.hilt.navigation.compose
    kapt libs.hilt.compiler
    kapt libs.hilt.android.compiler
    kapt libs.androidx.hilt.compiler
    implementation libs.androidx.hilt.work

    // Shapes
    implementation libs.androidx.graphics.shapes

    // WorkManager
    implementation libs.androidx.work.runtime.ktx
}